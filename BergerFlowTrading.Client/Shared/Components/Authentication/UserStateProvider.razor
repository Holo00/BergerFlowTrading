@using Microsoft.JSInterop
@using System.Net.Http
@using BergerFlowTrading.Shared.DTO.Identity
@using BergerFlowTrading.Shared.HttpUnitOfWork


@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject HttpUnitOfWork uow



<CascadingValue Value="@this">
    @ChildContent
</CascadingValue>

@functions {
    private List<TaskCompletionSource<bool>> pendingSignInFlows = new List<TaskCompletionSource<bool>>();

    [Parameter] RenderFragment ChildContent { get; set; }

    public UserStateDTO CurrentUser { get; private set; }

    public UserStateMode UserStateMode = UserStateMode.Init;


    protected override async Task OnInitAsync()
    {
        await GetUserState();
    }

    public async Task GetUserState()
    {
        var initState = UserStateMode;
        CurrentUser = await uow.IdenitytService.GetUserState();
        UserStateMode = CurrentUser != null ? UserStateMode.SignedIn : UserStateMode.SignedOut;

        StateHasChanged();
    }

    public async Task SignIn(LoginDTO dto)
    {
        CurrentUser = await uow.IdenitytService.Login(dto);
        if(CurrentUser != null)
        {
            UserStateMode = UserStateMode.SignedIn;
            StateHasChanged();
        }
    }

    public async Task SignUp(RegisterDTO dto)
    {
        bool result = await uow.IdenitytService.Register(dto);
        if(result)
        {
            UserStateMode = UserStateMode.SignInInProgress;
            StateHasChanged();
        }
    }

    public async Task SignOut()
    {
        bool result = await uow.IdenitytService.SignOut();

        if(result)
        {
            CurrentUser = null;
            UserStateMode = UserStateMode.SignedOut;
            StateHasChanged();
        }
    }
}