@using BergerFlowTrading.Shared.DTO.Data
@using BergerFlowTrading.Shared.HttpUnitOfWork


@page "/LimitArbitrage4Settings"

@inject HttpUnitOfWork uow

@attribute [Authorize(Roles = "BasicPlan")]

<h1>Limit Arbitrage 4 Management</h1>
<br />
<div>
    <div style="float:left">
        <button class="btn btn-primary" @onclick="@AddState">Add Setting</button>
    </div>
</div>
<br />
@if (settings == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table'>
        <thead>
            <tr>
                <th>Active</th>
                <th>Manage Balance</th>
                <th>Symbol</th>
                <th>Exchange 1</th>
                <th>Exchange 2</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sss in settings)
            {
                <tr>
                    @*<td><input type="checkbox" checked data-toggle="toggle" data-onstyle="success" data-offstyle="danger" bind="sss.Active" onchange="@(async () => await ChangeActive(sss.ID))" /></td>
                        <td><input type="checkbox" checked data-toggle="toggle" data-onstyle="success" data-offstyle="danger" bind="sss.ManagementBalanceON" onchange="@(async () => await ChangeBalanceOn(sss.ID))" /></td>*@
                    <td>
                        @if (sss.Active)
                        {
                            <button class="btn btn-success" @onclick="@(async () => await ChangeActive(sss.ID))">Active</button>
                        }
                        else
                        {
                            <button class="btn btn-light" @onclick="@(async () => await ChangeActive(sss.ID))">Active</button>
                        }
                    </td>
                    <td>
                        @if (sss.ManagementBalanceON)
                        {
                            <button class="btn btn-success" @onclick="@(async () => await ChangeBalanceOn(sss.ID))">Manage Balance</button>
                        }
                        else
                        {
                            <button class="btn btn-light" @onclick="@(async () => await ChangeBalanceOn(sss.ID))">Manage Balance</button>
                        }
                    </td>
                    <td>@sss.Symbol</td>
                    <td>@sss.Exchange_1.Name</td>
                    <td>@sss.Exchange_2.Name</td>
                    <td>
                        <button class="btn btn-info" @onclick="@(async () => await EditState(sss.ID))">Edit</button>
                        <button class="btn btn-danger" @onclick="@(async () => await DeleteState(sss.ID))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    if (isAdd)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">@modalTitle</h3>
                        <button type="button" class="close" @onclick="@closeModal">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="Name" class="control-label">Symbol</label>
                                <input for="Name" class="form-control" @bind="@setting.Symbol" />
                            </div>
                            <div class="form-group">
                                <label for="Name" class="control-label">Exchange 1</label>
                                <select @bind="@setting.Exchange_ID_1">
                                    <option></option>
                                    @foreach (var exx in exchanges)
                                    {
                                        <option value=@exx.ID>@exx.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="Name" class="control-label">Exchange 2</label>
                                <select @bind="@setting.Exchange_ID_2">
                                    <option></option>
                                    @foreach (var exx in exchanges)
                                    {
                                        <option value=@exx.ID>@exx.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="Name" class="control-label">Minimum ATR Value</label>
                                <input for="Name" class="form-control" @bind="@setting.MinATRValue" />
                            </div>
                            <div class="form-group">
                                <label for="Name" class="control-label">Value Currency</label>
                                <select @bind="@setting.Value_Currency">
                                    <option></option>
                                    @foreach (var val in (ValueCurrency[])Enum.GetValues(typeof(ValueCurrency)))
                                    {
                                        <option value=@val>@val.ToString()</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="Name" class="control-label">Min Value To Hold</label>
                                <input for="Name" class="form-control" @bind="@setting.Value_To_Trade_Min" />
                            </div>
                            <div class="form-group">
                                <label for="Name" class="control-label">Max Value To Hold</label>
                                <input for="Name" class="form-control" @bind="@setting.Value_To_Trade_Max" />
                            </div>
                            <div class="form-group">
                                <label for="Name" class="control-label">Min Price</label>
                                <input for="Name" class="form-control" @bind="@setting.Max_Price" />
                            </div>
                            <div class="form-group">
                                <label for="Name" class="control-label">Max Price</label>
                                <input for="Name" class="form-control" @bind="@setting.Max_Price" />
                            </div>
                            <div class="form-group">
                                <label for="Name" class="control-label">BaseCurrency Share Percent</label>
                                <input for="Name" class="form-control" @bind="@setting.BaseCurrency_Share_Percentage" />
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-block btn-success" @onclick="@(async () => await Save())" data-dismiss="modal">Save</button>
                    </div>
                </div>
            </div>
        </div>
    }
    if (isDelete)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Delete Exchange Settings</h3>
                    </div>
                    <div class="modal-body">
                        <h4>Do you want to delete this setting?</h4>
                        <table class="table">
                            <tr>
                                <td>Symbol</td>
                                <td>@setting.Symbol</td>
                            </tr>
                            <tr>
                                <td>Exchange 1</td>
                                <td>@setting.Exchange_1.Name</td>
                            </tr>
                            <tr>
                                <td>Exchange 2</td>
                                <td>@setting.Exchange_2.Name</td>
                            </tr>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger" @onclick="@(async () => await Delete(setting.ID))" data-dismiss="modal">YES</button>
                        <button class="btn btn-warning" @onclick="@closeModal">NO</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    List<ExchangeDTO> exchanges;
    List<LimitArbitrageStrategy4SettingsDTO> settings;
    LimitArbitrageStrategy4SettingsDTO setting;

    protected bool isDelete = false;
    protected bool isAdd = false;

    protected string modalTitle { get; set; }


    protected override async Task OnInitAsync()
    {
        await Load();
    }

    protected async Task Load()
    {
        settings = await uow.HttpLimitArbitrageStrategy4SettingsRepository.GetAll();
        exchanges = await uow.HttpExchangeRepository.GetAll();
    }


    protected async Task ChangeActive(int id)
    {
        await uow.HttpLimitArbitrageStrategy4SettingsRepository.ChangeActive(id);
        await Load();
    }

    protected async Task ChangeBalanceOn(int id)
    {
        await uow.HttpLimitArbitrageStrategy4SettingsRepository.ChangeBalanceOn(id);
        await Load();
    }

    protected async Task Save()
    {
        if (setting.ID == 0)
        {
            await uow.HttpLimitArbitrageStrategy4SettingsRepository.Create(setting);
        }
        else
        {
            await uow.HttpLimitArbitrageStrategy4SettingsRepository.Update(setting);
        }

        this.isAdd = false;
        await Load();
    }

    protected async Task Delete(int id)
    {
        if (setting.ID != 0)
        {
            await uow.HttpLimitArbitrageStrategy4SettingsRepository.Delete(id);
        }

        this.isDelete = false;
        await Load();
    }


    protected void AddState()
    {
        setting = new LimitArbitrageStrategy4SettingsDTO();
        this.modalTitle = "Add Secret";
        this.isAdd = true;
    }

    protected async Task EditState(int ID)
    {
        setting = await uow.HttpLimitArbitrageStrategy4SettingsRepository.GetById(ID);
        this.modalTitle = "Edit Secret";
        this.isAdd = true;
    }

    protected async Task DeleteState(int ID)
    {
        setting = await uow.HttpLimitArbitrageStrategy4SettingsRepository.GetById(ID);
        this.isDelete = true;
    }


    protected void closeModal()
    {
        this.isAdd = false;
        this.isDelete = false;
    }
}