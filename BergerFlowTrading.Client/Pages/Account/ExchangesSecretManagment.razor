@using BergerFlowTrading.Shared.DTO.Data
@using BergerFlowTrading.Shared.HttpUnitOfWork

@namespace BergerFlowTrading.Client.Pages.Account

@page "/ExchangesSecretManagment"

@inject HttpUnitOfWork uow

@attribute [Authorize(Roles = "BasicPlan")]

<h1>Api Keys Secrets Management</h1>
<br />
<div>
    <div style="float:left">
        <button class="btn btn-primary" @onclick="@AddState">Add Secret</button>
    </div>
</div>
<br />
@if (secrets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table'>
        <thead>
            <tr>
                <th>Exchange</th>
                <th>API ID</th>
                <th>API Secret</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sss in secrets)
            {
                <tr>
                    <td>@sss.Exchange.Name</td>
                    <td>@sss.Api_ID</td>
                    <td>@sss.Api_Secret</td>
                    <td>
                        <button class="btn btn-info" @onclick="@(async () => await EditState(sss.ID))">Edit</button>
                        <button class="btn btn-danger" @onclick="@(async () => await DeleteState(sss.ID))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    if (isAdd)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">@modalTitle</h3>
                        <button type="button" class="close" @onclick="@closeModal">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="Name" class="control-label">Exchange</label>
                                <select @bind="@secret.Exchange_ID">
                                    <option></option>
                                    @foreach (var exx in exchanges)
                                    {
                                        <option value=@exx.ID>@exx.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="Name" class="control-label">API ID</label>
                                <input for="Name" class="form-control" @bind="@secret.Api_ID" />
                            </div>
                            <div class="form-group">
                                <label for="Name" class="control-label">API Secret</label>
                                <input for="Name" class="form-control" @bind="@secret.Api_Secret" />
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-block btn-success" @onclick="@(async () => await Save())" data-dismiss="modal">Save</button>
                    </div>
                </div>
            </div>
        </div>
    }
    if (isDelete)
    {
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Delete Exchange Settings</h3>
                    </div>
                    <div class="modal-body">
                        <h4>Do you want to delete this setting?</h4>
                        <table class="table">
                            <tr>
                                <td>Exchange</td>
                                <td>@secret.Exchange.Name</td>
                            </tr>
                            <tr>
                                <td>API ID</td>
                                <td>@secret.Api_ID</td>
                            </tr>
                            <tr>
                                <td>API Secret</td>
                                <td>@secret.Api_Secret</td>
                            </tr>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger" @onclick="@(async () => await Delete(secret.ID))" data-dismiss="modal">YES</button>
                        <button class="btn btn-warning" @onclick="@closeModal">NO</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    List<ExchangeDTO> exchanges;
    List<UserExchangeSecretDTO> secrets;
    UserExchangeSecretDTO secret;

    protected bool isDelete = false;
    protected bool isAdd = false;

    protected string modalTitle { get; set; }


    protected override async Task OnInitAsync()
    {
        await Load();
    }

    protected async Task Load()
    {
        secrets = await this.uow.HttpUserExchangeSecretRepository.GetAll();
        exchanges = await this.uow.HttpExchangeRepository.GetAll();
    }

    protected async Task Save()
    {
        if (secret.ID == null)
        {
            await uow.HttpUserExchangeSecretRepository.Create(secret);
        }
        else
        {
            await uow.HttpUserExchangeSecretRepository.Update(secret);
        }

        this.isAdd = false;
        await Load();
    }

    protected async Task Delete(int? id)
    {
        if (secret.ID != null)
        {
            await uow.HttpUserExchangeSecretRepository.Delete(id.Value);
        }

        this.isDelete = false;
        await Load();
    }


    protected void AddState()
    {
        secret = new UserExchangeSecretDTO();
        this.modalTitle = "Add Secret";
        this.isAdd = true;
    }

    protected async Task EditState(int? ID)
    {
        secret = await uow.HttpUserExchangeSecretRepository.GetById(ID.Value);
        this.modalTitle = "Edit Secret";
        this.isAdd = true;
    }

    protected async Task DeleteState(int? ID)
    {
        secret = await uow.HttpUserExchangeSecretRepository.GetById(ID.Value);
        this.isDelete = true;
    }


    protected void closeModal()
    {
        this.isAdd = false;
        this.isDelete = false;
    }
}
