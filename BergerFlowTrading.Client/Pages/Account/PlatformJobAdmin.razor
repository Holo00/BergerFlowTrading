@using BergerFlowTrading.Shared.DTO.Data
@using BergerFlowTrading.Shared.HttpUnitOfWork
@using BergerFlowTrading.Shared.DTO.Data.Logs;
@using Microsoft.Extensions.Configuration;

@namespace BergerFlowTrading.Client.Pages.Account

@page "/PlatformJobAdmin"

@inject IConfiguration configuration
@inject HttpUnitOfWork uow
@*@inject HubConnectionBuilder hubConnectionBuilder*@

@attribute [Authorize(Roles = "BasicPlan")]

    <div class="container">
        <div class="row">
            @if (job == null || !job.IsRunning)
            {
                <button type="button" class="btn btn-success" @onclick="@StartJob">Start Platform</button>
            }
            else
            {
                <button type="button" class="btn btn-danger" @onclick="@StopJob">Stop Platform</button>
            }
        </div>
        <div class="row">
            <h3>Platform Logs</h3>
            @if (job != null && job.PlatformLogs != null && job.PlatformLogs.Any())
            {

            }
        </div>
        <div class="row">
            <h3>Strategy Logs</h3>
            @if (job != null && job.StrategyRuns != null && job.StrategyRuns.Any())
            {

            }
        </div>
        <div class="row">
            <h3>Exchange Logs</h3>
        </div>
    </div>


@code {
        PlatformJobsDTO job;
        List<StrategyRunsDTO> strategyRuns = new List<StrategyRunsDTO>();
        List<PlatformLogsDTO> platformLogs = new List<PlatformLogsDTO>();
        List<StrategyLogsDTO> strategyLogs  = new List<StrategyLogsDTO>();
        List<ExchangeLogsDTO> exchangeLogs = new List<ExchangeLogsDTO>();


protected override async Task OnInitAsync()
    {
        job = await this.uow.HttpPlatformLiveLogsRepository.GetCurrentPlatformJob();

        if(job != null)
        {
            platformLogs = job.PlatformLogs.ToList();
            strategyRuns = job.StrategyRuns.ToList();
        }
    }

    protected async void StartJob()
    {
        job = await this.uow.HttpPlatformLiveLogsRepository.StartPlatformJob();

        if (job != null)
        {
            platformLogs = job.PlatformLogs.ToList();
            strategyRuns = job.StrategyRuns.ToList();
        }
    }

    protected async void StopJob()
    {
        job = await this.uow.HttpPlatformLiveLogsRepository.StoptPlatformJob();

        if(job != null)
        {
            platformLogs = job.PlatformLogs.ToList();
            strategyRuns = job.StrategyRuns.ToList();
        }
    }

}